// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto;
namespace rat {
class ChunkedData;
struct ChunkedDataDefaultTypeInternal;
extern ChunkedDataDefaultTypeInternal _ChunkedData_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace rat
PROTOBUF_NAMESPACE_OPEN
template<> ::rat::ChunkedData* Arena::CreateMaybeMessage<::rat::ChunkedData>(Arena*);
template<> ::rat::Packet* Arena::CreateMaybeMessage<::rat::Packet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rat {

enum Packet_Type : int {
  Packet_Type_UNKNOWN = 0,
  Packet_Type_LIST_FILES = 1,
  Packet_Type_READ_FILE = 2,
  Packet_Type_TRANSFER_FILE = 3,
  Packet_Type_LIST_PROCESSES = 4,
  Packet_Type_KILL_PROCESS = 5,
  Packet_Type_IDENTIFY = 6,
  Packet_Type_ACK = 7,
  Packet_Type_ERROR = 8,
  Packet_Type_COMMAND = 9,
  Packet_Type_STATIC_ID = 10,
  Packet_Type_Packet_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Packet_Type_Packet_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Packet_Type_IsValid(int value);
constexpr Packet_Type Packet_Type_Type_MIN = Packet_Type_UNKNOWN;
constexpr Packet_Type Packet_Type_Type_MAX = Packet_Type_STATIC_ID;
constexpr int Packet_Type_Type_ARRAYSIZE = Packet_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Packet_Type_descriptor();
template<typename T>
inline const std::string& Packet_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Packet_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Packet_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Packet_Type_descriptor(), enum_t_value);
}
inline bool Packet_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Packet_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Packet_Type>(
    Packet_Type_descriptor(), name, value);
}
// ===================================================================

class Packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rat.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() override;
  explicit PROTOBUF_CONSTEXPR Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Packet& from) {
    Packet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rat.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Packet_Type Type;
  static constexpr Type UNKNOWN =
    Packet_Type_UNKNOWN;
  static constexpr Type LIST_FILES =
    Packet_Type_LIST_FILES;
  static constexpr Type READ_FILE =
    Packet_Type_READ_FILE;
  static constexpr Type TRANSFER_FILE =
    Packet_Type_TRANSFER_FILE;
  static constexpr Type LIST_PROCESSES =
    Packet_Type_LIST_PROCESSES;
  static constexpr Type KILL_PROCESS =
    Packet_Type_KILL_PROCESS;
  static constexpr Type IDENTIFY =
    Packet_Type_IDENTIFY;
  static constexpr Type ACK =
    Packet_Type_ACK;
  static constexpr Type ERROR =
    Packet_Type_ERROR;
  static constexpr Type COMMAND =
    Packet_Type_COMMAND;
  static constexpr Type STATIC_ID =
    Packet_Type_STATIC_ID;
  static inline bool Type_IsValid(int value) {
    return Packet_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Packet_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Packet_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Packet_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Packet_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Packet_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Packet_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPacketIdFieldNumber = 2,
    kSourceIdFieldNumber = 3,
    kDestinationIdFieldNumber = 4,
    kChunkedDataFieldNumber = 6,
    kTypeFieldNumber = 1,
    kEncryptedFieldNumber = 5,
  };
  // string packet_id = 2;
  void clear_packet_id();
  const std::string& packet_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packet_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packet_id();
  PROTOBUF_NODISCARD std::string* release_packet_id();
  void set_allocated_packet_id(std::string* packet_id);
  private:
  const std::string& _internal_packet_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packet_id(const std::string& value);
  std::string* _internal_mutable_packet_id();
  public:

  // string source_id = 3;
  void clear_source_id();
  const std::string& source_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_id();
  PROTOBUF_NODISCARD std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // string destination_id = 4;
  void clear_destination_id();
  const std::string& destination_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_id();
  PROTOBUF_NODISCARD std::string* release_destination_id();
  void set_allocated_destination_id(std::string* destination_id);
  private:
  const std::string& _internal_destination_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_id(const std::string& value);
  std::string* _internal_mutable_destination_id();
  public:

  // .rat.ChunkedData chunked_data = 6;
  bool has_chunked_data() const;
  private:
  bool _internal_has_chunked_data() const;
  public:
  void clear_chunked_data();
  const ::rat::ChunkedData& chunked_data() const;
  PROTOBUF_NODISCARD ::rat::ChunkedData* release_chunked_data();
  ::rat::ChunkedData* mutable_chunked_data();
  void set_allocated_chunked_data(::rat::ChunkedData* chunked_data);
  private:
  const ::rat::ChunkedData& _internal_chunked_data() const;
  ::rat::ChunkedData* _internal_mutable_chunked_data();
  public:
  void unsafe_arena_set_allocated_chunked_data(
      ::rat::ChunkedData* chunked_data);
  ::rat::ChunkedData* unsafe_arena_release_chunked_data();

  // .rat.Packet.Type type = 1;
  void clear_type();
  ::rat::Packet_Type type() const;
  void set_type(::rat::Packet_Type value);
  private:
  ::rat::Packet_Type _internal_type() const;
  void _internal_set_type(::rat::Packet_Type value);
  public:

  // bool encrypted = 5;
  void clear_encrypted();
  bool encrypted() const;
  void set_encrypted(bool value);
  private:
  bool _internal_encrypted() const;
  void _internal_set_encrypted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rat.Packet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packet_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_id_;
    ::rat::ChunkedData* chunked_data_;
    int type_;
    bool encrypted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class ChunkedData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rat.ChunkedData) */ {
 public:
  inline ChunkedData() : ChunkedData(nullptr) {}
  ~ChunkedData() override;
  explicit PROTOBUF_CONSTEXPR ChunkedData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkedData(const ChunkedData& from);
  ChunkedData(ChunkedData&& from) noexcept
    : ChunkedData() {
    *this = ::std::move(from);
  }

  inline ChunkedData& operator=(const ChunkedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkedData& operator=(ChunkedData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkedData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkedData* internal_default_instance() {
    return reinterpret_cast<const ChunkedData*>(
               &_ChunkedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChunkedData& a, ChunkedData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkedData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkedData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkedData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunkedData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChunkedData& from) {
    ChunkedData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkedData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rat.ChunkedData";
  }
  protected:
  explicit ChunkedData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataIdFieldNumber = 1,
    kPayloadFieldNumber = 4,
    kErrorMessageFieldNumber = 6,
    kSequenceNumberFieldNumber = 2,
    kTotalChunksFieldNumber = 3,
    kSuccessFieldNumber = 5,
  };
  // string data_id = 1;
  void clear_data_id();
  const std::string& data_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_id();
  PROTOBUF_NODISCARD std::string* release_data_id();
  void set_allocated_data_id(std::string* data_id);
  private:
  const std::string& _internal_data_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_id(const std::string& value);
  std::string* _internal_mutable_data_id();
  public:

  // bytes payload = 4;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // string error_message = 6;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // uint64 sequence_number = 2;
  void clear_sequence_number();
  uint64_t sequence_number() const;
  void set_sequence_number(uint64_t value);
  private:
  uint64_t _internal_sequence_number() const;
  void _internal_set_sequence_number(uint64_t value);
  public:

  // uint64 total_chunks = 3;
  void clear_total_chunks();
  uint64_t total_chunks() const;
  void set_total_chunks(uint64_t value);
  private:
  uint64_t _internal_total_chunks() const;
  void _internal_set_total_chunks(uint64_t value);
  public:

  // bool success = 5;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rat.ChunkedData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    uint64_t sequence_number_;
    uint64_t total_chunks_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// .rat.Packet.Type type = 1;
inline void Packet::clear_type() {
  _impl_.type_ = 0;
}
inline ::rat::Packet_Type Packet::_internal_type() const {
  return static_cast< ::rat::Packet_Type >(_impl_.type_);
}
inline ::rat::Packet_Type Packet::type() const {
  // @@protoc_insertion_point(field_get:rat.Packet.type)
  return _internal_type();
}
inline void Packet::_internal_set_type(::rat::Packet_Type value) {
  
  _impl_.type_ = value;
}
inline void Packet::set_type(::rat::Packet_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:rat.Packet.type)
}

// string packet_id = 2;
inline void Packet::clear_packet_id() {
  _impl_.packet_id_.ClearToEmpty();
}
inline const std::string& Packet::packet_id() const {
  // @@protoc_insertion_point(field_get:rat.Packet.packet_id)
  return _internal_packet_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Packet::set_packet_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packet_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rat.Packet.packet_id)
}
inline std::string* Packet::mutable_packet_id() {
  std::string* _s = _internal_mutable_packet_id();
  // @@protoc_insertion_point(field_mutable:rat.Packet.packet_id)
  return _s;
}
inline const std::string& Packet::_internal_packet_id() const {
  return _impl_.packet_id_.Get();
}
inline void Packet::_internal_set_packet_id(const std::string& value) {
  
  _impl_.packet_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Packet::_internal_mutable_packet_id() {
  
  return _impl_.packet_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Packet::release_packet_id() {
  // @@protoc_insertion_point(field_release:rat.Packet.packet_id)
  return _impl_.packet_id_.Release();
}
inline void Packet::set_allocated_packet_id(std::string* packet_id) {
  if (packet_id != nullptr) {
    
  } else {
    
  }
  _impl_.packet_id_.SetAllocated(packet_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packet_id_.IsDefault()) {
    _impl_.packet_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rat.Packet.packet_id)
}

// string source_id = 3;
inline void Packet::clear_source_id() {
  _impl_.source_id_.ClearToEmpty();
}
inline const std::string& Packet::source_id() const {
  // @@protoc_insertion_point(field_get:rat.Packet.source_id)
  return _internal_source_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Packet::set_source_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rat.Packet.source_id)
}
inline std::string* Packet::mutable_source_id() {
  std::string* _s = _internal_mutable_source_id();
  // @@protoc_insertion_point(field_mutable:rat.Packet.source_id)
  return _s;
}
inline const std::string& Packet::_internal_source_id() const {
  return _impl_.source_id_.Get();
}
inline void Packet::_internal_set_source_id(const std::string& value) {
  
  _impl_.source_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Packet::_internal_mutable_source_id() {
  
  return _impl_.source_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Packet::release_source_id() {
  // @@protoc_insertion_point(field_release:rat.Packet.source_id)
  return _impl_.source_id_.Release();
}
inline void Packet::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  _impl_.source_id_.SetAllocated(source_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_id_.IsDefault()) {
    _impl_.source_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rat.Packet.source_id)
}

// string destination_id = 4;
inline void Packet::clear_destination_id() {
  _impl_.destination_id_.ClearToEmpty();
}
inline const std::string& Packet::destination_id() const {
  // @@protoc_insertion_point(field_get:rat.Packet.destination_id)
  return _internal_destination_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Packet::set_destination_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.destination_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rat.Packet.destination_id)
}
inline std::string* Packet::mutable_destination_id() {
  std::string* _s = _internal_mutable_destination_id();
  // @@protoc_insertion_point(field_mutable:rat.Packet.destination_id)
  return _s;
}
inline const std::string& Packet::_internal_destination_id() const {
  return _impl_.destination_id_.Get();
}
inline void Packet::_internal_set_destination_id(const std::string& value) {
  
  _impl_.destination_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Packet::_internal_mutable_destination_id() {
  
  return _impl_.destination_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Packet::release_destination_id() {
  // @@protoc_insertion_point(field_release:rat.Packet.destination_id)
  return _impl_.destination_id_.Release();
}
inline void Packet::set_allocated_destination_id(std::string* destination_id) {
  if (destination_id != nullptr) {
    
  } else {
    
  }
  _impl_.destination_id_.SetAllocated(destination_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_id_.IsDefault()) {
    _impl_.destination_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rat.Packet.destination_id)
}

// bool encrypted = 5;
inline void Packet::clear_encrypted() {
  _impl_.encrypted_ = false;
}
inline bool Packet::_internal_encrypted() const {
  return _impl_.encrypted_;
}
inline bool Packet::encrypted() const {
  // @@protoc_insertion_point(field_get:rat.Packet.encrypted)
  return _internal_encrypted();
}
inline void Packet::_internal_set_encrypted(bool value) {
  
  _impl_.encrypted_ = value;
}
inline void Packet::set_encrypted(bool value) {
  _internal_set_encrypted(value);
  // @@protoc_insertion_point(field_set:rat.Packet.encrypted)
}

// .rat.ChunkedData chunked_data = 6;
inline bool Packet::_internal_has_chunked_data() const {
  return this != internal_default_instance() && _impl_.chunked_data_ != nullptr;
}
inline bool Packet::has_chunked_data() const {
  return _internal_has_chunked_data();
}
inline void Packet::clear_chunked_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.chunked_data_ != nullptr) {
    delete _impl_.chunked_data_;
  }
  _impl_.chunked_data_ = nullptr;
}
inline const ::rat::ChunkedData& Packet::_internal_chunked_data() const {
  const ::rat::ChunkedData* p = _impl_.chunked_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::rat::ChunkedData&>(
      ::rat::_ChunkedData_default_instance_);
}
inline const ::rat::ChunkedData& Packet::chunked_data() const {
  // @@protoc_insertion_point(field_get:rat.Packet.chunked_data)
  return _internal_chunked_data();
}
inline void Packet::unsafe_arena_set_allocated_chunked_data(
    ::rat::ChunkedData* chunked_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chunked_data_);
  }
  _impl_.chunked_data_ = chunked_data;
  if (chunked_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rat.Packet.chunked_data)
}
inline ::rat::ChunkedData* Packet::release_chunked_data() {
  
  ::rat::ChunkedData* temp = _impl_.chunked_data_;
  _impl_.chunked_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rat::ChunkedData* Packet::unsafe_arena_release_chunked_data() {
  // @@protoc_insertion_point(field_release:rat.Packet.chunked_data)
  
  ::rat::ChunkedData* temp = _impl_.chunked_data_;
  _impl_.chunked_data_ = nullptr;
  return temp;
}
inline ::rat::ChunkedData* Packet::_internal_mutable_chunked_data() {
  
  if (_impl_.chunked_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::rat::ChunkedData>(GetArenaForAllocation());
    _impl_.chunked_data_ = p;
  }
  return _impl_.chunked_data_;
}
inline ::rat::ChunkedData* Packet::mutable_chunked_data() {
  ::rat::ChunkedData* _msg = _internal_mutable_chunked_data();
  // @@protoc_insertion_point(field_mutable:rat.Packet.chunked_data)
  return _msg;
}
inline void Packet::set_allocated_chunked_data(::rat::ChunkedData* chunked_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chunked_data_;
  }
  if (chunked_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chunked_data);
    if (message_arena != submessage_arena) {
      chunked_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunked_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chunked_data_ = chunked_data;
  // @@protoc_insertion_point(field_set_allocated:rat.Packet.chunked_data)
}

// -------------------------------------------------------------------

// ChunkedData

// string data_id = 1;
inline void ChunkedData::clear_data_id() {
  _impl_.data_id_.ClearToEmpty();
}
inline const std::string& ChunkedData::data_id() const {
  // @@protoc_insertion_point(field_get:rat.ChunkedData.data_id)
  return _internal_data_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChunkedData::set_data_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rat.ChunkedData.data_id)
}
inline std::string* ChunkedData::mutable_data_id() {
  std::string* _s = _internal_mutable_data_id();
  // @@protoc_insertion_point(field_mutable:rat.ChunkedData.data_id)
  return _s;
}
inline const std::string& ChunkedData::_internal_data_id() const {
  return _impl_.data_id_.Get();
}
inline void ChunkedData::_internal_set_data_id(const std::string& value) {
  
  _impl_.data_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChunkedData::_internal_mutable_data_id() {
  
  return _impl_.data_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChunkedData::release_data_id() {
  // @@protoc_insertion_point(field_release:rat.ChunkedData.data_id)
  return _impl_.data_id_.Release();
}
inline void ChunkedData::set_allocated_data_id(std::string* data_id) {
  if (data_id != nullptr) {
    
  } else {
    
  }
  _impl_.data_id_.SetAllocated(data_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_id_.IsDefault()) {
    _impl_.data_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rat.ChunkedData.data_id)
}

// uint64 sequence_number = 2;
inline void ChunkedData::clear_sequence_number() {
  _impl_.sequence_number_ = uint64_t{0u};
}
inline uint64_t ChunkedData::_internal_sequence_number() const {
  return _impl_.sequence_number_;
}
inline uint64_t ChunkedData::sequence_number() const {
  // @@protoc_insertion_point(field_get:rat.ChunkedData.sequence_number)
  return _internal_sequence_number();
}
inline void ChunkedData::_internal_set_sequence_number(uint64_t value) {
  
  _impl_.sequence_number_ = value;
}
inline void ChunkedData::set_sequence_number(uint64_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:rat.ChunkedData.sequence_number)
}

// uint64 total_chunks = 3;
inline void ChunkedData::clear_total_chunks() {
  _impl_.total_chunks_ = uint64_t{0u};
}
inline uint64_t ChunkedData::_internal_total_chunks() const {
  return _impl_.total_chunks_;
}
inline uint64_t ChunkedData::total_chunks() const {
  // @@protoc_insertion_point(field_get:rat.ChunkedData.total_chunks)
  return _internal_total_chunks();
}
inline void ChunkedData::_internal_set_total_chunks(uint64_t value) {
  
  _impl_.total_chunks_ = value;
}
inline void ChunkedData::set_total_chunks(uint64_t value) {
  _internal_set_total_chunks(value);
  // @@protoc_insertion_point(field_set:rat.ChunkedData.total_chunks)
}

// bytes payload = 4;
inline void ChunkedData::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& ChunkedData::payload() const {
  // @@protoc_insertion_point(field_get:rat.ChunkedData.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChunkedData::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rat.ChunkedData.payload)
}
inline std::string* ChunkedData::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:rat.ChunkedData.payload)
  return _s;
}
inline const std::string& ChunkedData::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void ChunkedData::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* ChunkedData::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* ChunkedData::release_payload() {
  // @@protoc_insertion_point(field_release:rat.ChunkedData.payload)
  return _impl_.payload_.Release();
}
inline void ChunkedData::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rat.ChunkedData.payload)
}

// bool success = 5;
inline void ChunkedData::clear_success() {
  _impl_.success_ = false;
}
inline bool ChunkedData::_internal_success() const {
  return _impl_.success_;
}
inline bool ChunkedData::success() const {
  // @@protoc_insertion_point(field_get:rat.ChunkedData.success)
  return _internal_success();
}
inline void ChunkedData::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void ChunkedData::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:rat.ChunkedData.success)
}

// string error_message = 6;
inline void ChunkedData::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& ChunkedData::error_message() const {
  // @@protoc_insertion_point(field_get:rat.ChunkedData.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChunkedData::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rat.ChunkedData.error_message)
}
inline std::string* ChunkedData::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:rat.ChunkedData.error_message)
  return _s;
}
inline const std::string& ChunkedData::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void ChunkedData::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* ChunkedData::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* ChunkedData::release_error_message() {
  // @@protoc_insertion_point(field_release:rat.ChunkedData.error_message)
  return _impl_.error_message_.Release();
}
inline void ChunkedData::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rat.ChunkedData.error_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rat::Packet_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rat::Packet_Type>() {
  return ::rat::Packet_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
